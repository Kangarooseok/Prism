#Server

server.port=8080

#Application name

spring.application.name=controller

#Database

# 기본(Command) DB - CCTV용
spring.datasource.driver-class-name=${DB_DRIVER_CLASS_NAME}
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# 읽기(Read) DB - 오류판별용
error.datasource.driver-class-name=${ERROR_DB_DRIVER_CLASS_NAME:org.mariadb.jdbc.Driver}
error.datasource.url=${ERROR_DB_URL:${DB_URL}}
error.datasource.username=${ERROR_DB_USERNAME:${DB_USERNAME}}
error.datasource.password=${ERROR_DB_PASSWORD:${DB_PASSWORD}}


#JPA

# 배포에선 none, 로컬 첫 구동에선 update
spring.jpa.hibernate.ddl-auto=none

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.implicit_naming_strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect

# 로컬 MYSQL 전용
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


#Logging

logging.level.org.hibernate.type=trace
logging.level.org.springframework.cloud=debug

management.endpoints.web.exposure.include=*


#Kafka

##Producer
#
#spring.kafka.bootstrap-servers=172.30.28.41:9092
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#
##Consumer
#
#spring.kafka.consumer.bootstrap-servers=172.30.28.41:9092
#spring.kafka.consumer.group-id=prism
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
#
## Topic name
#kafka.topic.cctv=cctv-events
